import re
import os
from pathlib import Path

QUERY_TAG_JSON = """{
    "functionality": "{os.getenv('functionality')}",
    "envid": "{os.getenv('envid')}",
    "run_cycle_id": "{os.getenv('run_cycle_id')}"
}"""

def add_query_tag(content):
    # Pattern to find connect calls with indentation detection
    pattern = r'''
        (snowflake\.connector\.connect|sf\.connect)   # Connect method
        \s*\(([^)]*)                                  # Capture parameters
        (\))                                          # Closing parenthesis
    '''
    
    def replacement(match):
        connect_method = match.group(1)
        params = match.group(2).rstrip()
        closing_paren = match.group(3)
        
        # Detect indentation from last parameter line
        last_line = params.split('\n')[-1] if '\n' in params else ''
        indent = re.match(r'^\s*', last_line).group(0) if last_line else '    '
        
        # Format new parameter with proper indentation
        new_param = f",\n{indent}session_parameters={{\n"
        new_param += f"{indent}    'QUERY_TAG': f{QUERY_TAG_JSON}\n"
        new_param += f"{indent}}}"
        
        # Handle existing parameters formatting
        if not params.strip():
            # Empty parameters case
            return f"{connect_method}({new_param}\n)"
        elif '\n' not in params:
            # Single-line parameters
            return f"{connect_method}({params}{new_param}{closing_paren})"
        else:
            # Multi-line parameters
            return f"{connect_method}(\n{params}{new_param}\n{closing_paren})"

    return re.sub(
        pattern,
        replacement,
        content,
        flags=re.DOTALL | re.IGNORECASE | re.VERBOSE
    )

def process_file(file_path):
    with open(file_path, 'r+', encoding='utf-8') as f:
        content = f.read()
        
        # Add os import if missing
        if 'import os' not in content:
            content = re.sub(
                r'^(import\s+)',
                r'import os\n\1',
                content,
                count=1,
                flags=re.MULTILINE
            )
        
        modified = add_query_tag(content)
        
        f.seek(0)
        f.write(modified)
        f.truncate()

# Process all Python files
for py_file in Path('.').glob('**/*.py'):
    process_file(py_file)
